// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorInformation errorInformation
//
// Problem as defined in https://tools.ietf.org/html/rfc7807
// swagger:model errorInformation
type ErrorInformation struct {

	// A human-readable explanation specific to this occurrence of the problem.
	// Required: true
	Detail *string `json:"detail"`

	// The HTTP status code for this occurrence of the problem.
	// Required: true
	Status *int32 `json:"status"`
}

// Validate validates this error information
func (m *ErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorInformation) validateDetail(formats strfmt.Registry) error {

	if err := validate.Required("detail", "body", m.Detail); err != nil {
		return err
	}

	return nil
}

func (m *ErrorInformation) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorInformation) UnmarshalBinary(b []byte) error {
	var res ErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
