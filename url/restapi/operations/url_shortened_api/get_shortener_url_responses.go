// Code generated by go-swagger; DO NOT EDIT.

package url_shortened_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "assignment/url/models"
)

// GetShortenerURLOKCode is the HTTP code returned for type GetShortenerURLOK
const GetShortenerURLOKCode int = 200

/*GetShortenerURLOK getShortenerUrl API "Successful"

swagger:response getShortenerUrlOK
*/
type GetShortenerURLOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetShortenedURLResp `json:"body,omitempty"`
}

// NewGetShortenerURLOK creates GetShortenerURLOK with default headers values
func NewGetShortenerURLOK() *GetShortenerURLOK {

	return &GetShortenerURLOK{}
}

// WithPayload adds the payload to the get shortener Url o k response
func (o *GetShortenerURLOK) WithPayload(payload *models.GetShortenedURLResp) *GetShortenerURLOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shortener Url o k response
func (o *GetShortenerURLOK) SetPayload(payload *models.GetShortenedURLResp) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShortenerURLOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetShortenerURLUnauthorizedCode is the HTTP code returned for type GetShortenerURLUnauthorized
const GetShortenerURLUnauthorizedCode int = 401

/*GetShortenerURLUnauthorized Unauthorised

swagger:response getShortenerUrlUnauthorized
*/
type GetShortenerURLUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorInformation `json:"body,omitempty"`
}

// NewGetShortenerURLUnauthorized creates GetShortenerURLUnauthorized with default headers values
func NewGetShortenerURLUnauthorized() *GetShortenerURLUnauthorized {

	return &GetShortenerURLUnauthorized{}
}

// WithPayload adds the payload to the get shortener Url unauthorized response
func (o *GetShortenerURLUnauthorized) WithPayload(payload *models.ErrorInformation) *GetShortenerURLUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shortener Url unauthorized response
func (o *GetShortenerURLUnauthorized) SetPayload(payload *models.ErrorInformation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShortenerURLUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetShortenerURLInternalServerErrorCode is the HTTP code returned for type GetShortenerURLInternalServerError
const GetShortenerURLInternalServerErrorCode int = 500

/*GetShortenerURLInternalServerError getAimlConfigInfo API Failed "Internal Server Error"

swagger:response getShortenerUrlInternalServerError
*/
type GetShortenerURLInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorInformation `json:"body,omitempty"`
}

// NewGetShortenerURLInternalServerError creates GetShortenerURLInternalServerError with default headers values
func NewGetShortenerURLInternalServerError() *GetShortenerURLInternalServerError {

	return &GetShortenerURLInternalServerError{}
}

// WithPayload adds the payload to the get shortener Url internal server error response
func (o *GetShortenerURLInternalServerError) WithPayload(payload *models.ErrorInformation) *GetShortenerURLInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shortener Url internal server error response
func (o *GetShortenerURLInternalServerError) SetPayload(payload *models.ErrorInformation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShortenerURLInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
