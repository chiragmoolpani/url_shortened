// Code generated by go-swagger; DO NOT EDIT.

package url_shortened_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetShortenerURLHandlerFunc turns a function with the right signature into a get shortener Url handler
type GetShortenerURLHandlerFunc func(GetShortenerURLParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetShortenerURLHandlerFunc) Handle(params GetShortenerURLParams) middleware.Responder {
	return fn(params)
}

// GetShortenerURLHandler interface for that can handle valid get shortener Url params
type GetShortenerURLHandler interface {
	Handle(GetShortenerURLParams) middleware.Responder
}

// NewGetShortenerURL creates a new http.Handler for the get shortener Url operation
func NewGetShortenerURL(ctx *middleware.Context, handler GetShortenerURLHandler) *GetShortenerURL {
	return &GetShortenerURL{Context: ctx, Handler: handler}
}

/*GetShortenerURL swagger:route GET /url/getShortUrl/{URL} URL Shortened API getShortenerUrl

Get Shortened URL

*/
type GetShortenerURL struct {
	Context *middleware.Context
	Handler GetShortenerURLHandler
}

func (o *GetShortenerURL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetShortenerURLParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
